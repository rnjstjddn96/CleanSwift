//
//  MainViewController.swift
//  CleanArchitecture
//
//  Created by imform-mm-2101 on 2021/07/06.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift

protocol MainDisplayLogic: class {
    func displayTest(viewModel: Main.TodoList.ViewModel)
    func displayError(viewModel: Main.TodoList.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic {
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    var disposeBag = DisposeBag()
    let mainView = MainView()
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = .white
        mainView.initMainView(to: self.view)
        setAction()
    }
    
    //MARK: Private
    private func requestTest() {
        let request = Main.TodoList.Request()
        interactor?.reqeustTodos(request: request)
    }
    
    private func setAction() {
//        mainView.button.rx.tap
//            .observe(on: MainScheduler.instance)
//            .subscribe { [weak self] _ in
//                self?.router?.routeToSomewhere()
//            }
//            .disposed(by: disposeBag)
        
        mainView.button.rx.tap
            .asDriver()
            .drive { [weak self] _ in
                guard let self = self else { return }
                self.requestTest()
            }
            .disposed(by: disposeBag)
        
        mainView.buttonTextSubject
            .bind { [weak self] in
                self?.mainView.button.setTitle($0, for: .normal)
            }
            .disposed(by: disposeBag)
            
    }
    
    //MARK: Display logic
    func displayTest(viewModel: Main.TodoList.ViewModel) {
        let count = viewModel.result.count
        let message = "\(count)개의 할일이 있습니다"
        mainView.buttonTextSubject.onNext(message)
        AlertUtils.displayBasicAlert(controller: self, title: "Data 수신 성공",
                                     message: message,
                                     showCancelButton: false,
                                     okButtonTitle: "확인",
                                     cancelButtonTitle: "취소",
                                     okButtonCallback: {
                                        self.router?.routeToSomewhere()
                                     },
                                     cancelButtonCallback: nil)
    }
    
    func displayError(viewModel: Main.TodoList.ViewModel) {
        AlertUtils.displayBasicAlert(controller: self, title: "Data를 받지 못했습니다",
                                     message: viewModel.error?.localizedDescription ?? "",
                                     showCancelButton: false,
                                     okButtonTitle: "확인",
                                     cancelButtonTitle: "취소",
                                     okButtonCallback: nil,
                                     cancelButtonCallback: nil)
    }
}
